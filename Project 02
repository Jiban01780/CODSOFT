import random

# Define the board
board = [[' ' for _ in range(3)] for _ in range(3)]

# Check for a winner
def check_winner(board):
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return row[0]

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return board[0][col]

    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]

    return None

# Get available moves
def get_available_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']

# Minimax function with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == 'O':
        return 10 - depth
    elif winner == 'X':
        return depth - 10
    elif not get_available_moves(board):
        return 0

    if is_maximizing:
        best_score = float('-inf')
        for (r, c) in get_available_moves(board):
            board[r][c] = 'O'
            score = minimax(board, depth + 1, False, alpha, beta)
            board[r][c] = ' '
            best_score = max(best_score, score)
            alpha = max(alpha, score)
            if beta <= alpha:
                break
        return best_score
    else:
        best_score = float('inf')
        for (r, c) in get_available_moves(board):
            board[r][c] = 'X'
            score = minimax(board, depth + 1, True, alpha, beta)
            board[r][c] = ' '
            best_score = min(best_score, score)
            beta = min(beta, score)
            if beta <= alpha:
                break
        return best_score

# AI move function
def ai_move():
    best_score = float('-inf')
    best_move = None
    for (r, c) in get_available_moves(board):
        board[r][c] = 'O'
        score = minimax(board, 0, False, float('-inf'), float('inf'))
        board[r][c] = ' '
        if score > best_score:
            best_score = score
            best_move = (r, c)
    return best_move

# Print the board
def print_board():
    for row in board:
        print('|'.join(row))
    print()

# Main game loop
def play_game():
    print("Tic-Tac-Toe: AI (O) vs Human (X)")
    while True:
        print_board()
        human_move = tuple(map(int, input("Enter your move (row col): ").split()))
        if human_move not in get_available_moves(board):
            print("Invalid move. Try again.")
            continue
        board[human_move[0]][human_move[1]] = 'X'

        winner = check_winner(board)
        if winner:
            print_board()
            if winner == 'X':
                print("Congratulations! You (Human) win the game! ðŸŽ‰")
            else:
                print("AI wins the game! Better luck next time! ðŸ¤–")
            break

        if not get_available_moves(board):
            print_board()
            print("It's a draw!")
            break

        ai_best_move = ai_move()
        board[ai_best_move[0]][ai_best_move[1]] = 'O'

        winner = check_winner(board)
        if winner:
            print_board()
            if winner == 'X':
                print("Congratulations! You (Human) win the game! ðŸŽ‰")
            else:
                print("AI wins the game. Better luck next time ")
            break

play_game()
